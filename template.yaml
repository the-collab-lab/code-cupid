Transform: AWS::Serverless-2016-10-31
Resources:
  Items:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
  ListItems:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ListItems
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: ListItems
      CodeUri: src/ListItems
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      Events:
        CodeCupidApiGETitems:
          Type: Api
          Properties:
            Path: /items
            Method: GET
            RestApiId: !Ref CodeCupidApi
      Environment:
        Variables:
          ITEMS_TABLE_NAME: !Ref Items
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref Items
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false
  CreateItem:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateItem
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: CreateItem
      CodeUri: src/CreateItem
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      Events:
        CodeCupidApiPOSTitems:
          Type: Api
          Properties:
            Path: /items
            Method: POST
            RestApiId: !Ref CodeCupidApi
      Environment:
        Variables:
          ITEMS_TABLE_NAME: !Ref Items
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref Items
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false
  GetItem:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GetItem
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: GetItem
      CodeUri: src/GetItem
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      Events:
        CodeCupidApiGETitemsid:
          Type: Api
          Properties:
            Path: /items/{id}
            Method: GET
            RestApiId: !Ref CodeCupidApi
      Environment:
        Variables:
          ITEMS_TABLE_NAME: !Ref Items
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref Items
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false
  UpdateItem:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-UpdateItem
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: UpdateItem
      CodeUri: src/UpdateItem
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      Events:
        CodeCupidApiPUTitemsid:
          Type: Api
          Properties:
            Path: /items/{id}
            Method: PUT
            RestApiId: !Ref CodeCupidApi
      Environment:
        Variables:
          ITEMS_TABLE_NAME: !Ref Items
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref Items
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false
  DeleteItem:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DeleteItem
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: DeleteItem
      CodeUri: src/DeleteItem
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      Events:
        CodeCupidApiDELETEitemsid:
          Type: Api
          Properties:
            Path: /items/{id}
            Method: DELETE
            RestApiId: !Ref CodeCupidApi
      Environment:
        Variables:
          ITEMS_TABLE_NAME: !Ref Items
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Items
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - index.mts
        External:
          - '@aws-sdk/*'
          - aws-sdk
        Minify: false
  CodeCupidApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: CodeCupidApi
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /items:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListItems.Arn}/invocations
              responses: {}
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateItem.Arn}/invocations
              responses: {}
          /items/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetItem.Arn}/invocations
              responses: {}
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateItem.Arn}/invocations
              responses: {}
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteItem.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
  Frontend:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-frontend-${AWS::AccountId}
      WebsiteConfiguration:
        IndexDocument: index.html
Metadata:
  AWS::Composer::Groups:
    Group:
      Label: API Compute
      Members:
        - ListItems
        - CreateItem
        - GetItem
        - UpdateItem
        - DeleteItem