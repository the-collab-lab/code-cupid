Transform: AWS::Serverless-2016-10-31
Resources:
  AddRepo:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-AddRepo
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: AddRepo
      CodeUri: src/AddRepo
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          REPOS_TABLE_NAME: !Ref Repos
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Repos
      Events:
        CodeCupidApiPOSTrepo:
          Type: Api
          Properties:
            Path: /repo
            Method: POST
            RestApiId: !Ref CodeCupidApi
  ListReposByLanguage:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ListReposByLanguage
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: ListReposByLanguage
      CodeUri: src/ListReposByLanguage
      Handler: index.handler
      Runtime: nodejs20.x
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          REPOS_TABLE_NAME: !Ref Repos
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref Repos
      Events:
        CodeCupidApiGETreposlanguage:
          Type: Api
          Properties:
            Path: /repos/{language}
            Method: GET
            RestApiId: !Ref CodeCupidApi
  CodeCupidApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: CodeCupidApi
      StageName: prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /repos/{language}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListReposByLanguage.Arn}/invocations
              responses: {}
          /repo:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddRepo.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
  Frontend:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-frontend-${AWS::AccountId}
      WebsiteConfiguration:
        IndexDocument: index.html
  Repos:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: language
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: languageIndex
          KeySchema:
            - AttributeName: language
              KeyType: HASH
          Projection:
            ProjectionType: ALL
Outputs:
  ApiURL:
    Description: The URL for the API
    Value: !Sub https://${CodeCupidApi}.execute-api.${AWS::Region}.amazonaws.com/prod/
  FrontendURL:
    Description: The URL of the S3 bucket containing the built frontend
    Value: !GetAtt Frontend.WebsiteURL
Metadata:
  AWS::Composer::Groups:
    Group:
      Label: API Compute
      Members:
        - ListReposByLanguage
        - AddRepo